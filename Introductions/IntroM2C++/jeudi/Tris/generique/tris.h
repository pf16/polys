#ifndef __TRIS__#define __TRIS__template<class T>class Table { protected:  int longueur;  T *valeurs; public:  const char *nom;  Table(int);  T& operator[] (int);  void hasard();  int triee();  virtual void tri() = 0;  void teste();  ~Table() {    //    cerr << "Destruction d'un tableau de longueur " << longueur << endl;    delete valeurs;  }};template <class T>class BubbleTable : public Table<T> { public: BubbleTable(int n) : Table<T>(n) {Table<T>::nom = "Tri a bulle";}  void tri();};template <class T>class SelectTable : public Table<T> { public: SelectTable(int n) : Table<T>(n) {Table<T>::nom = "Tri par selection";}  void tri();};template <class T>class InsertTable : public Table<T> { public: InsertTable(int n) : Table<T>(n) {Table<T>::nom = "Tri par insertion";}  void tri();};template <class T>class ShellTable : public Table<T> { public:  ShellTable (int n) : Table<T>(n) {Table<T>::nom = "Tri de Shell";}  void tri();};template <class T>class HeapTable : public Table<T> {  void sift (int l, int r); public:  HeapTable (int n) : Table<T>(n) {Table<T>::nom = "Tri par tas";}  void tri();};template <class T>class QuickTable : public Table<T> {  void quick (int l, int r); public:  QuickTable (int n) : Table<T>(n) {Table<T>::nom = "Tri rapide";}  void tri();};#include "tris.cc"#endif